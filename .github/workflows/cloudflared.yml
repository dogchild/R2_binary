name: Deploy Cloudflared Binaries to R2

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # 步骤 1: 检出仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 安装并配置 rclone
      - name: Install and Configure rclone
        run: |
          echo "Installing rclone..."
          curl https://rclone.org/install.sh | sudo bash
          
          echo "Creating rclone config directory..."
          mkdir -p ~/.config/rclone
          
          echo "Writing rclone config file..."
          echo "[myR2]
          type = s3
          provider = Cloudflare
          access_key_id = ${{ secrets.R2_ACCESS_KEY_ID }}
          secret_access_key = ${{ secrets.R2_SECRET_ACCESS_KEY }}
          endpoint = https://${{ secrets.R2_ACCOUNT_ID }}.r2.cloudflarestorage.com" > ~/.config/rclone/rclone.conf

      # 步骤 3: 从 URL 直接上传 AMD64 架构的 Cloudflared
      - name: Upload AMD64 from URL
        run: |
          echo "Uploading AMD64 version directly from URL..."
          # 关键修正：添加 --s3-no-check-bucket 参数
          rclone copyurl --s3-no-check-bucket https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 myR2:gfw/cloudflared --progress
          rclone copyurl --s3-no-check-bucket https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 myR2:gfw/backend --progress

      # 步骤 4: 从 URL 直接上传 ARM64 架构的 Cloudflared
      - name: Upload ARM64 from URL
        run: |
          echo "Uploading ARM64 version directly from URL..."
          # 关键修正：添加 --s3-no-check-bucket 参数
          rclone copyurl --s3-no-check-bucket https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64 myR2:gfw-arm/cloudflared --progress
          rclone copyurl --s3-no-check-bucket https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64 myR2:gfw-arm/backend --progress

      # 步骤 5: 刷新 Cloudflare 缓存
      - name: Purge Cloudflare Cache
        run: |
          echo "Purging Cloudflare cache..."
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CF_ZONE_ID }}/purge_cache" \
               -H "Authorization: Bearer ${{ secrets.CF_API_TOKEN }}" \
               -H "Content-Type: application/json" \
               --data '{
                 "files": [
                   "https://amd.dogchild.eu.org/cloudflared",
                   "https://arm.dogchild.eu.org/cloudflared",
                   "https://amd.dogchild.eu.org/backend",
                   "https://arm.dogchild.eu.org/backend"
                 ]
               }'
